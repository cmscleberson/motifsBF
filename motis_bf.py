# -*- coding: utf-8 -*-
"""Motis_BF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wDkHajhhuTVQDP08G4MqfVoXDLryCafz
"""

from itertools import combinations_with_replacement, combinations, permutations
import os.path






def generateList(listWord):
    listOut = []
    listTemp = []
    for i in range(len(listWord)):
        for j in range(len(listWord[i])):
            for k in range(len(listWord[i][j])):
                listTemp.append(listWord[i][j][k].lower())
        listOut.append(listTemp.copy())
        listTemp.clear()
    return listOut



def newList():
    listCl = []
    for i in range(0,27):
        listCl.append(0)
    return listCl



def identOccur(regsList):

    regsOccurrences = []
    regsValues = []
    listOccFinal = []

    for i in range(97,124):
        regsValues.append(i)
        regsOccurrences.append(0)


    for i in range(len(regsList)):
        listOcc = newList()

        for j in range(len(regsList[i])):
            local= ord(regsList[i][j])
            for k in range(len(regsValues)):
                if regsValues[k]==local:
                    listOcc[k] = 1
        listOccFinal.append(listOcc.copy())


    return listOccFinal


def countOccur(listOccur):


    listCount = newList()


    for i in range(len(listOccur)):
        lines = len(listOccur)
        for j in range(len(listOccur[i])):
            cols = j


        for k in range(cols):

            countOcc = 0
            for l in range(len(listOccur)):

                if listOccur[l][k] == 1:
                    countOcc = countOcc+1
            if countOcc==lines:
                listCount[k] =1



    return listCount



def strRepList(listCount):
    listOutStr = []

    for i in range(len(listCount)):
        if listCount[i] == 1:
            listOutStr.append(chr(i+97))
    return listOutStr



def genCombnations(listIn):
  list_combinations = []
  for n in range(len(listIn) + 1):
    list_combinations += list(permutations(listIn, n))

  return list_combinations

listTest01 = [["MAKNITVPYVSVSDFDWGLNLEASASLPWNPTIWSLVAALTALPLWMTLELTVSVLYVFQRWSGLYFYAVLITAWSISLHAIGFLLSYCVPSCNWIASSIMTELGWVGMVTGFSLVLYSRLNLMSFIMRNRHISRIALAMIITNAVLFHIPTFVVFMIGVSSPGLFVKYISAMNALERVQIVMFSVQELILSGLYIYGTFKMAQDSFNSRIRRTI"],


["MATNITVPYVAIGDFDWGLNLASSVPLPWNQTIWSLVAVFTALPLWMTLELTVSVLYVFRRWSGLYFWAVLVTTWSISLHAIGFLLSYCVPSCNWIASSLITEFGWAGMVTGFSLVLYSRLTLLSFVMRNRHISRIALGMITTDAILFHIPTFVVFMVGISSPANFVKYVPYMNIVERIQIVMFSVQELILSGLYIYGTFKMAQDSFNSRIRRTI"],


["MADLPKLRSLVAAFTALPLWMTIELTVSVLYVFRRWSGLYFWSVLVTTWSISVHAIGFLLSYCVPSCNQIASSVLAEVGWVGMVSGFAVVLYSRLNLISFVMQNRHILRLALGMIITDAMLFHIPALVIFIIGTSSGAMFEKYVTCMNILERIQIVAFSVQELIISGLYIYGTFKMERDSFNSRIRKTIRLLITVQIAVILCDALLITLDFAGYY"],



["MAENITVPYVPFDQFHWSISYTGPLPWNQTVWSLIAVFTALPLWMTVELTVWVFYLFRRWSGLYFWSVLITTWGVTLHAIGFVLKVCVPRCNYILSMVIAELGWIGMVTGFAMVMYSRLNLIGFVMRNRYILRLALAMIIVDGIVFHTSTITIFAIGLANPSARYLSYMNAIERVQIVIFTVQEIILSVIYIYGTFKMAQDSFNNRIRSTINYLI"],


["MAGNITVPYVPFDQFHWSMSHVGPLPWNQTVWSLIAVFTALPLWITIELTICVFYLFRRWSGLYFWSVLITTWGVTLHAIGFVLKVCVPSCNYIFSMVVAELGWMGMVTGFAMVMYSRLSLIGFVMRNRYILRLALAMIIINAIVLHTSTITIFAIGIEEPGPKYLSYMNSIERIQIVIFTVQEVILSTIYIYGTFKMAQDSFNKRIRATISYLI"],

["MTSVRNITVPYVPLDEFDWSFYRSGPLPWNQTIWSLIAVFTAVPLWMTIELTVWVFYIFNRYSGLYFWSVLITTWGVTLHAIGFVLKDCVPQCSWIFSTILAEIGWVGMVTGFSVVLYSRLHLVSFVMHSSSILRLALSMIIIDALLFHVPTIVFQFGCSDPHTHAKYVAYMGPMERVQVLGFSIQETILSALYIYGTVQMFKESITSKIRTTLK"],


["MSGLHNITVPYVSTSQFDWSFARTYPLPWNQTIWSIVAVFSAVPLWMNIELTVWVLYVFRRYSGLYFWSILITTWCIALHAIGYVLKECVPDCNWILSTLIVEIGWVGMVTGFSMVLYSRLHLVNFTIKNPHILRITLIMIITDAFLFHTPTIVFQFGLANQSRHDQYASYLHVMERIQIMGFSLQEITLTSIYIYGTLQIIKSSLNSKIRTTMV"],


["MTKVHNITVPYVTVSDFDWSFARTGPLPWNQTVWSLIAVFTALPLWTTIELTVCVFYTFRRYSGLYFWSVLCTTWGVTIHAIGFVLKFCVPSCNWIFSTVLAEIGWVGMVSGFSIVLYSRLHLVVRSQRTLQLVLAAIVVDAFLFHVPTIVFQFGTSDKHTHKKFLPYMNVMERVQIVGFSVQEIIISAIYIYATMQMLRGSFNRRMRTTMAWLI"],


["MSVHNITVPYVNVIDFDWGFNRTGPLPWNQTVWSILAVFTAVPLWMTVELTIWVFYVFRRWSGLYFWSVLICTWGVTLHTIGFILKFCVPSCNWIVSTTLAEIGWVSMVTGFSVVLYSRLHLVVRSPRILNLVLIMVMTDAFLFHVPTIVFQYGISANGKTHVYYLPFMAPMERIQVFGFSIQEVVISIIYIWATLRMLKGSFNKKIRNTIIFLI"],


["MTKVHNITVPYVTVSDFDWSFARTGPLPWNQTVWSLIAVFTALPLWTTIELTVCVFYTFRRYSGLYFWSVLCTTWGVTLHAIGFVLKFCVPSCNWIFSTVLAEIGWVGMVSGFSIVLYSRLHLVVRSQRTLQLVLAAIIVDAFLFHVPTIVFQFGLSDKHTHKKFLPYMTNMERVQIVGFSVQEIIISAIYIWATMQMLKGSFNRRMRTTMAWLI"],


["MSPTVSHITVPWVPVADFDWSFARSGPLPWNLTVWSILAVFTALPIWMTVELTVWVFYTFRRYSGLYFWSVLACTWGTTIHAIGFVLKFCVPECNWIFSTVLAEIGWVGMVTGFSVVLYSRLNLIVGTTLHHRALKFILAMIVTDAFLFHVPTIVFQFAVSNKSTHEKFLPYMAPMERVQVMAFSVQEVIISGVYIYCTLAQRHISLHKNMPKTI"],


["MSVHNITVPYVDVKDFDWGFNRTGPLPWNQTVWSILAVFTAVPLWMTVELTIWVFYVFRRWSGLYFWSVLICTWGVTLHAIGFILKFCVPSCNWIVSTTLAEIGWVSMVTGFSVVLYSRLHLVVRSQRILKFVLIMVITDAFLFHVPTIVFQYGVSANKKTHAYYLPFMAPMERVQVLGFSIQEVLISAIYIWATLRMLKGSFNKKIRNTIMFLI"],


["MSHTVNVTVPYVELADFDWSFTRTGPLPWNQTVWSLLAVFTALPIWMTIELAVWVFYTFKRYSGLYFWSILVCTFGTSIRAVGFILKDCVPECNWVISTTIAEVGWASMVTGFSLVLYSRLHLIPSLRASQFTLRIILAIIITDALILHIPTIVFQYGISNSNAAIHDKFLPFMVPMEKVQVLGFSVQETAISAIYIYATVNLLRGSFNQKIRRT"],


["MSACHFVPLAQYDWSLHPALEPVAIPWNPTAYCLVSGFCAVSLWMTVELTLQVFFTFRRHKGLYFWSLLVCTWGVALHVQGVILKLFNESNWIISSIIFKIGWVGNVTGFSLVLYSRLNLVVHDRRIRRAVLAMIITDAVLLHTPIIIFDFGISSPHPGVWYTPMKVMERIQVVWFSVQETIISLMYIWCTRDFLKDIYSRQTHRVMQLLISAQV"],


["MSDPSLPPYVPLRDFNWSLSHFGILPWNPTVFCLISSFFAVALYLSIELILQVWFTFKRHRALYYWSILITTLGIIGHVVAFTLKLFVPGENEIGSTFLAKISWVANTTGFSMVLYSRLHLVLRNSSVPHIVLAFILVDGLLFHTPVIVCSFGLSTPAFPHWVPPMDIAERIQIVGFTIQEFTISSIYTYTTWKMLQSGYSVQLRNVLILLVLAQ"],




["MEVHSRDTGDGTTNETLISASLASHMTIAAFTAIAWYNVIELDISVYMAFKRKRGLYFWSIVLSTQGILLHSLAFILKFYGIITQFEVTCTMITIGWYLMVTGQSLVLYSRLNLIVRETWIIRAVLIMIIWNAITLHIPTTVLTFGSNSPNPDRFTHGFRIMEMIQMTMFSIQELIISATYIWATMRFLRPVYNDRVRSVMTQLVWINVAIILMD"],


["MFEILSKRATTGVTGALPYNPVEYCILAAGTAIAWAYTIELDLVIFYTFRRRKGLYFWSLLISSWGCTLHALGFVLKFLVGTSWLIELPFVEIGWVAMVTGQAFVLYSRLHLVVRNQRTLRYVLCMIIFDACALHIPTIIFTYGSNSPMANYWTPKFNIMERIQLTGFCVQEFVISTIYITSTVRLLGSIYHSMTRKVMLQLLLINCICIGMDII"],


["MFETLSKRATTGVTGALPYNPVEYCILAAGTAIAWAYTIELDLVIFYTFRRRKGLYFWSLLISSWGCTLHALGFVLKFLVGTSWLIELPFVEIGWVAMVTGQAFVLYSRLHLVVRNQRTLRYVLCMIIFDACALHIPTIIFTYGSNSPMANYWTPKFNIMERIQLTGFCVQEFVISTIYITSTVRLLGSIYHSMTRKVMLQLLLINCICIGMDII"],



["MAEECVHFVKFSDYDWTFDRVGWLPWNPAAFCLIAAVCAIAYWMSIEVLVLVYVTFKRHAGIYFWSIIFTTIGIILQNTGYILLSFENTWPVILVVVICKIGWIMNVTGFSIVLWSRLHLVVRSQRILKWLLVIILIDGLVCHTPIAVFEFGLMTRNHNTYYRPMQIMERIQQTVFTIQETIMSCLYIYHTRKFLKIGYPMQTRKVVGLLLLVQL"]]

listTest = [['acztpfs'],['dicyatb'],['mactasc']]


lst = generateList(listTest01)
lstOcc = identOccur(lst)
lstCountOc = countOccur(lstOcc)
lstStr = strRepList(lstCountOc)
listMotifs = genCombnations(lstStr)


name_of_file='motifs'
save_path = os.getcwd()+'/'
print(save_path)




completeName = os.path.join(save_path, name_of_file+".txt")         
file = open(completeName, "w")


for element in listMotifs:
    file.write(str(element) + "\n")
file.close()

print('End!!!!!!!!!!!')

